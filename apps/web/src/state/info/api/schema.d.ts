/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/unclaim-fees/{protocol}/{chainId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Batch get unclaimed fees
     * @deprecated
     */
    post: operations['postUnclaim-feesByProtocolByChainId']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/cached/tokens/chart/{chainName}/rate': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get token to token rate chart */
    get: operations['getCachedTokensChartByChainNameRate']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/cached/tokens/chart/{chainName}/{address}/{protocol}/price': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get token price chart by protocol */
    get: operations['getCachedTokensChartByChainNameByAddressByProtocolPrice']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/cached/tokens/chart/{chainName}/{address}/price': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get token price chart */
    get: operations['getCachedTokensChartByChainNameByAddressPrice']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/cached/tokens/chart/{chainName}/{address}/{protocol}/volume': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get token volume chart by protocol */
    get: operations['getCachedTokensChartByChainNameByAddressByProtocolVolume']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/cached/tokens/chart/{chainName}/{address}/{protocol}/tvl': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get token tvl chart by protocol */
    get: operations['getCachedTokensChartByChainNameByAddressByProtocolTvl']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/cached/tokens/chart/{chainName}/{address}/tvl': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get token tvl chart */
    get: operations['getCachedTokensChartByChainNameByAddressTvl']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/cached/tokens/{chainName}/{address}/price': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get token price reference
     * @description Get token price reference from liquidity pool. If more than one protocol is provided, it will return the largest TVL protocol
     */
    get: operations['getCachedTokensByChainNameByAddressPrice']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/cached/tokens/v3/{chainName}/{address}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get v3 token data */
    get: operations['getCachedTokensV3ByChainNameByAddress']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/cached/tokens/v2/{chainName}/{address}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get v2 token data */
    get: operations['getCachedTokensV2ByChainNameByAddress']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/cached/tokens/stable/{chainName}/{address}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get stable token data */
    get: operations['getCachedTokensStableByChainNameByAddress']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/cached/tokens/v3/{chainName}/list/top': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get v3 top tokens */
    get: operations['getCachedTokensV3ByChainNameListTop']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/cached/tokens/v2/{chainName}/list/top': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get v2 top tokens */
    get: operations['getCachedTokensV2ByChainNameListTop']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/cached/tokens/stable/{chainName}/list/top': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get stable top tokens */
    get: operations['getCachedTokensStableByChainNameListTop']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/cached/pools/ticks/{chainName}/v3/{pool}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get all ticks from v3 pool */
    get: operations['getCachedPoolsTicksByChainNameV3ByPool']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/cached/pools/positions/{chainName}/v3/{pool}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get positions from v3 pool */
    get: operations['getCachedPoolsPositionsByChainNameV3ByPool']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/cached/pools/chart/{protocol}/{chainName}/{address}/tvl': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get pool tvl chart */
    get: operations['getCachedPoolsChartByProtocolByChainNameByAddressTvl']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/cached/pools/chart/{protocol}/{chainName}/{address}/volume': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get pool volume chart */
    get: operations['getCachedPoolsChartByProtocolByChainNameByAddressVolume']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/cached/pools/list': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get pools list */
    get: operations['getCachedPoolsList']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/cached/pools/v3/{chainName}/{address}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get v3 pool data */
    get: operations['getCachedPoolsV3ByChainNameByAddress']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/cached/pools/v2/{chainName}/{address}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get v2 pool data */
    get: operations['getCachedPoolsV2ByChainNameByAddress']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/cached/pools/stable/{chainName}/{address}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get stable pool data */
    get: operations['getCachedPoolsStableByChainNameByAddress']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/cached/pools/v3/{chainName}/list/top': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get top v3 pools */
    get: operations['getCachedPoolsV3ByChainNameListTop']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/cached/pools/v2/{chainName}/list/top': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get top v2 pools */
    get: operations['getCachedPoolsV2ByChainNameListTop']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/cached/pools/stable/{chainName}/list/top': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get top stable pools */
    get: operations['getCachedPoolsStableByChainNameListTop']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/cached/tx/{chainName}/v3/swaps': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get v3 swaps by page */
    get: operations['getCachedTxByChainNameV3Swaps']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/cached/tx/{chainName}/v3/recent': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get recent v3 transaction */
    get: operations['getCachedTxByChainNameV3Recent']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/cached/tx/{chainName}/v2/recent': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get recent v2 transaction */
    get: operations['getCachedTxByChainNameV2Recent']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/cached/tx/{chainName}/stable/recent': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get recent stable transaction */
    get: operations['getCachedTxByChainNameStableRecent']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/cached/block/{chainName}/{timestamp}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get closest block by unix timestamp */
    get: operations['getCachedBlockByChainNameByTimestamp']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/cached/gauges/total-votes/all': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['getCachedGaugesTotal-votesAll']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/cached/protocol/chart/{protocol}/{chainName}/volume': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get protocol volume chart */
    get: operations['getCachedProtocolChartByProtocolByChainNameVolume']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/cached/protocol/chart/{protocol}/{chainName}/tvl': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get protocol tvl chart */
    get: operations['getCachedProtocolChartByProtocolByChainNameTvl']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/cached/protocol/{protocol}/{chainName}/stats': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get protocol stats */
    get: operations['getCachedProtocolByProtocolByChainNameStats']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/status/{protocol}/{chainName}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get status of info data for chain */
    get: operations['getStatusByProtocolByChainName']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/doc/json': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['getDocJson']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
}
export type webhooks = Record<string, never>
export interface components {
  schemas: {
    /**
     * @description Chain name
     * @example arbitrum
     * @enum {string}
     */
    ChainName: 'bsc' | 'ethereum' | 'base' | 'opbnb' | 'zksync' | 'polygon-zkevm' | 'linea' | 'arbitrum'
    /**
     * @description Protocol version
     * @example v3
     * @enum {string}
     */
    Protocol: 'v2' | 'v3' | 'stable'
    v3TokenData: {
      id: string
      symbol: string
      name: string
      decimals: number
      txCount: number
      txCount24h: number
      txCount7d: number
      priceUSD: string
      priceUSD24h: string
      priceUSD7d: string
      volumeUSD: string
      volumeUSD24h: string
      volumeUSD7d: string
      tvlUSD: string
      tvlUSD24h: string
      tvlUSD7d: string
      tvl: string
      tvl24h: string
      tvl7d: string
      feeUSD: string
      feeUSD24h: string
      feeUSD7d: string
    }
    v2TokenData: {
      id: string
      symbol: string
      name: string
      decimals: number
      txCount: number
      txCount24h: number
      txCount7d: number
      priceUSD: string
      priceUSD24h: string
      priceUSD7d: string
      volumeUSD: string
      volumeUSD24h: string
      volumeUSD7d: string
      tvlUSD: string
      tvlUSD24h: string
      tvlUSD7d: string
      tvl: string
      tvl24h: string
      tvl7d: string
    }
    TokenPrice: {
      priceUSD: string
      /**
       * @description Protocol version
       * @example v3
       * @enum {string}
       */
      protocol: 'v2' | 'v3' | 'stable'
      tvlUSD: string
      timestamp: Record<string, never> | string
    }
    ticks: {
      id: string
      tickIdx: number
      liquidityGross: string
      liquidityNet: string
    }[]
    positions: {
      id: string
      liquidity: string
      owner: string
      lowerTickIdx: number
      upperTickIdx: number
    }[]
    /**
     * @description Chart period
     * @example 1D
     * @enum {string}
     */
    ChartPeriod: '1H' | '1D' | '1W' | '1M' | '1Y'
    transactions: {
      id: string
      transactionHash: string
      poolId: string
      token0: {
        id: string
        symbol: string
        name: string
        decimals: number
      }
      token1: {
        id: string
        symbol: string
        name: string
        decimals: number
      }
      amount0: string
      amount1: string
      amountUSD: string
      origin: null | string
      recipient: null | string
      timestamp: Record<string, never> | string
    }[]
    stableTransactions: {
      /** @enum {string} */
      type: 'mint' | 'burn' | 'swap'
      id: string
      transactionHash: string
      poolId: string
      token0: {
        id: string
        symbol: string
        name: string
        decimals: number
      }
      token1: {
        id: string
        symbol: string
        name: string
        decimals: number
      }
      amount0: string
      amount1: string
      amountUSD: string
      origin: null | string
      recipient: null | string
      timestamp: Record<string, never> | string
    }[]
    ProtocolQuery: {
      /**
       * @description Chart group by
       * @example 1D
       * @enum {string}
       */
      groupBy: '1D' | '1W' | '1M'
    }
  }
  responses: never
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}
export type $defs = Record<string, never>
export interface operations {
  'postUnclaim-feesByProtocolByChainId': {
    parameters: {
      query?: never
      header?: never
      path: {
        protocol: 'pancake-v3' | 'uniswap-v3'
        chainId: '1' | '56'
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': {
          ids: string[]
        }
        'multipart/form-data': {
          ids: string[]
        }
        'text/plain': {
          ids: string[]
        }
      }
    }
    responses: {
      /** @description Successfully batch get unclaimed fees */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            data: {
              id: string
              token0: {
                symbol: string
                amount: string
                amountUSD: string
              }
              token1: {
                symbol: string
                amount: string
                amountUSD: string
              }
              totalUSD: string
            }[]
          }
          'multipart/form-data': {
            data: {
              id: string
              token0: {
                symbol: string
                amount: string
                amountUSD: string
              }
              token1: {
                symbol: string
                amount: string
                amountUSD: string
              }
              totalUSD: string
            }[]
          }
          'text/plain': {
            data: {
              id: string
              token0: {
                symbol: string
                amount: string
                amountUSD: string
              }
              token1: {
                symbol: string
                amount: string
                amountUSD: string
              }
              totalUSD: string
            }[]
          }
        }
      }
    }
  }
  getCachedTokensChartByChainNameRate: {
    parameters: {
      query: {
        /** @description Chart period */
        period: '1H' | '1D' | '1W' | '1M' | '1Y'
        /** @description Ethereum address */
        tokenA: string
        /** @description Ethereum address */
        tokenB: string
      }
      header?: never
      path: {
        /** @description Chain name */
        chainName: 'bsc' | 'ethereum' | 'base' | 'opbnb' | 'zksync' | 'polygon-zkevm' | 'linea' | 'arbitrum'
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            bucket: Record<string, never> | string
            open: null | string
            close: null | string
            high: null | string
            low: null | string
          }[]
        }
      }
    }
  }
  getCachedTokensChartByChainNameByAddressByProtocolPrice: {
    parameters: {
      query: {
        /** @description Chart period */
        period: '1H' | '1D' | '1W' | '1M' | '1Y'
      }
      header?: never
      path: {
        /** @description Chain name */
        chainName: 'bsc' | 'ethereum' | 'base' | 'opbnb' | 'zksync' | 'polygon-zkevm' | 'linea' | 'arbitrum'
        /** @description Protocol version */
        protocol: 'v2' | 'v3' | 'stable'
        /** @description Ethereum address */
        address: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            bucket: Record<string, never> | string
            open: null | string
            close: null | string
            high: null | string
            low: null | string
          }[]
        }
      }
    }
  }
  getCachedTokensChartByChainNameByAddressPrice: {
    parameters: {
      query: {
        /** @description Chart period */
        period: '1H' | '1D' | '1W' | '1M' | '1Y'
      }
      header?: never
      path: {
        /** @description Chain name */
        chainName: 'bsc' | 'ethereum' | 'base' | 'opbnb' | 'zksync' | 'polygon-zkevm' | 'linea' | 'arbitrum'
        /** @description Ethereum address */
        address: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            bucket: Record<string, never> | string
            open: null | string
            close: null | string
            high: null | string
            low: null | string
          }[]
        }
      }
    }
  }
  getCachedTokensChartByChainNameByAddressByProtocolVolume: {
    parameters: {
      query: {
        /** @description Chart period */
        period: '1H' | '1D' | '1W' | '1M' | '1Y'
      }
      header?: never
      path: {
        /** @description Chain name */
        chainName: 'bsc' | 'ethereum' | 'base' | 'opbnb' | 'zksync' | 'polygon-zkevm' | 'linea' | 'arbitrum'
        /** @description Protocol version */
        protocol: 'v2' | 'v3' | 'stable'
        /** @description Ethereum address */
        address: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            bucket: Record<string, never> | string
            volumeUSD: null | string
          }[]
        }
      }
    }
  }
  getCachedTokensChartByChainNameByAddressByProtocolTvl: {
    parameters: {
      query: {
        /** @description Chart period */
        period: '1H' | '1D' | '1W' | '1M' | '1Y'
      }
      header?: never
      path: {
        /** @description Chain name */
        chainName: 'bsc' | 'ethereum' | 'base' | 'opbnb' | 'zksync' | 'polygon-zkevm' | 'linea' | 'arbitrum'
        /** @description Protocol version */
        protocol: 'v2' | 'v3' | 'stable'
        /** @description Ethereum address */
        address: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            bucket: Record<string, never> | string
            tvlUSD: null | string
          }[]
        }
      }
    }
  }
  getCachedTokensChartByChainNameByAddressTvl: {
    parameters: {
      query: {
        /** @description Chart period */
        period: '1H' | '1D' | '1W' | '1M' | '1Y'
      }
      header?: never
      path: {
        /** @description Chain name */
        chainName: 'bsc' | 'ethereum' | 'base' | 'opbnb' | 'zksync' | 'polygon-zkevm' | 'linea' | 'arbitrum'
        /** @description Ethereum address */
        address: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            bucket: Record<string, never> | string
            tvlUSD: null | string
          }[]
        }
      }
    }
  }
  getCachedTokensByChainNameByAddressPrice: {
    parameters: {
      query?: {
        timestamp?: string | number
        /** @description Array of protocol versions */
        protocols?: ('v2' | 'v3' | 'stable') | ('v2' | 'v3' | 'stable')[]
      }
      header?: never
      path: {
        /** @description Chain name */
        chainName: 'bsc' | 'ethereum' | 'base' | 'opbnb' | 'zksync' | 'polygon-zkevm' | 'linea' | 'arbitrum'
        /** @description Ethereum address */
        address: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['TokenPrice']
        }
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': unknown
        }
      }
    }
  }
  getCachedTokensV3ByChainNameByAddress: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Chain name */
        chainName: 'bsc' | 'ethereum' | 'base' | 'opbnb' | 'zksync' | 'polygon-zkevm' | 'linea' | 'arbitrum'
        /** @description Ethereum address */
        address: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['v3TokenData']
        }
      }
    }
  }
  getCachedTokensV2ByChainNameByAddress: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Chain name */
        chainName: 'bsc' | 'ethereum' | 'base' | 'opbnb' | 'zksync' | 'polygon-zkevm' | 'linea' | 'arbitrum'
        /** @description Ethereum address */
        address: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['v2TokenData']
        }
      }
    }
  }
  getCachedTokensStableByChainNameByAddress: {
    parameters: {
      query?: never
      header?: never
      path: {
        chainName: 'bsc' | 'arbitrum'
        /** @description Ethereum address */
        address: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['v2TokenData']
        }
      }
    }
  }
  getCachedTokensV3ByChainNameListTop: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Chain name */
        chainName: 'bsc' | 'ethereum' | 'base' | 'opbnb' | 'zksync' | 'polygon-zkevm' | 'linea' | 'arbitrum'
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            id: string
            symbol: string
            name: string
            decimals: number
            txCount: number
            txCount24h: number
            txCount7d: number
            priceUSD: string
            priceUSD24h: string
            priceUSD7d: string
            volumeUSD: string
            volumeUSD24h: string
            volumeUSD7d: string
            tvlUSD: string
            tvlUSD24h: string
            tvlUSD7d: string
            tvl: string
            tvl24h: string
            tvl7d: string
            feeUSD: string
            feeUSD24h: string
            feeUSD7d: string
          }[]
        }
      }
    }
  }
  getCachedTokensV2ByChainNameListTop: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Chain name */
        chainName: 'bsc' | 'ethereum' | 'base' | 'opbnb' | 'zksync' | 'polygon-zkevm' | 'linea' | 'arbitrum'
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            id: string
            symbol: string
            name: string
            decimals: number
            txCount: number
            txCount24h: number
            txCount7d: number
            priceUSD: string
            priceUSD24h: string
            priceUSD7d: string
            volumeUSD: string
            volumeUSD24h: string
            volumeUSD7d: string
            tvlUSD: string
            tvlUSD24h: string
            tvlUSD7d: string
            tvl: string
            tvl24h: string
            tvl7d: string
          }[]
        }
      }
    }
  }
  getCachedTokensStableByChainNameListTop: {
    parameters: {
      query?: never
      header?: never
      path: {
        chainName: 'bsc' | 'arbitrum'
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            id: string
            symbol: string
            name: string
            decimals: number
            txCount: number
            txCount24h: number
            txCount7d: number
            priceUSD: string
            priceUSD24h: string
            priceUSD7d: string
            volumeUSD: string
            volumeUSD24h: string
            volumeUSD7d: string
            tvlUSD: string
            tvlUSD24h: string
            tvlUSD7d: string
            tvl: string
            tvl24h: string
            tvl7d: string
          }[]
        }
      }
    }
  }
  getCachedPoolsTicksByChainNameV3ByPool: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Chain name */
        chainName: 'bsc' | 'ethereum' | 'base' | 'opbnb' | 'zksync' | 'polygon-zkevm' | 'linea' | 'arbitrum'
        /** @description Pool address */
        pool: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ticks']
        }
      }
    }
  }
  getCachedPoolsPositionsByChainNameV3ByPool: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Chain name */
        chainName: 'bsc' | 'ethereum' | 'base' | 'opbnb' | 'zksync' | 'polygon-zkevm' | 'linea' | 'arbitrum'
        /** @description Pool address */
        pool: string
        /** @description Ethereum address */
        owner: string
        tick: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['positions']
        }
      }
    }
  }
  getCachedPoolsChartByProtocolByChainNameByAddressTvl: {
    parameters: {
      query: {
        /** @description Chart period */
        period: '1H' | '1D' | '1W' | '1M' | '1Y'
      }
      header?: never
      path: {
        /** @description Chain name */
        chainName: 'bsc' | 'ethereum' | 'base' | 'opbnb' | 'zksync' | 'polygon-zkevm' | 'linea' | 'arbitrum'
        /** @description Protocol version */
        protocol: 'v2' | 'v3' | 'stable'
        /** @description Ethereum address */
        address: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            bucket: Record<string, never> | string
            tvlUSD: null | string
          }[]
        }
      }
    }
  }
  getCachedPoolsChartByProtocolByChainNameByAddressVolume: {
    parameters: {
      query: {
        /** @description Chart period */
        period: '1H' | '1D' | '1W' | '1M' | '1Y'
      }
      header?: never
      path: {
        /** @description Chain name */
        chainName: 'bsc' | 'ethereum' | 'base' | 'opbnb' | 'zksync' | 'polygon-zkevm' | 'linea' | 'arbitrum'
        /** @description Protocol version */
        protocol: 'v2' | 'v3' | 'stable'
        /** @description Ethereum address */
        address: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            bucket: Record<string, never> | string
            volumeUSD: null | string
          }[]
        }
      }
    }
  }
  getCachedPoolsList: {
    parameters: {
      query: {
        orderBy: 'tvlUSD' | 'volumeUSD24H' | 'apr24H'
        /** @description Array of protocol versions */
        protocols: ('v2' | 'v3' | 'stable') | ('v2' | 'v3' | 'stable')[]
        /** @description Array of chain names */
        chains:
          | ('bsc' | 'ethereum' | 'base' | 'opbnb' | 'zksync' | 'polygon-zkevm' | 'linea' | 'arbitrum')
          | ('bsc' | 'ethereum' | 'base' | 'opbnb' | 'zksync' | 'polygon-zkevm' | 'linea' | 'arbitrum')[]
        /** @description Filter by Pool address, should be use with chain filter */
        pool?: string
        /** @description Filter by token address, should be use with chain filter */
        token?: string
        /** @description Cursor for pagination before */
        before?: string
        /** @description Cursor for pagination after */
        after?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  getCachedPoolsV3ByChainNameByAddress: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Chain name */
        chainName: 'bsc' | 'ethereum' | 'base' | 'opbnb' | 'zksync' | 'polygon-zkevm' | 'linea' | 'arbitrum'
        /** @description Ethereum address */
        address: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            id: string
            token0: {
              id: string
              symbol: string
              name: string
              decimals: number
            }
            token1: {
              id: string
              symbol: string
              name: string
              decimals: number
            }
            volumeUSD: string
            token0Price: string
            token1Price: string
            tvlToken0: string
            tvlToken1: string
            volumeUSD24h: null | string
            volumeUSD7d: null | string
            tvlUSD: string
            tvlUSD24h: null | string
            tvlUSD7d: null | string
            createdAtTimestamp: Record<string, never> | string
            feeTier: number
            liquidity: string
            sqrtPrice: string
            tick: null | number
            feeUSD: string
            protocolFeeUSD: string
          }
        }
      }
    }
  }
  getCachedPoolsV2ByChainNameByAddress: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Chain name */
        chainName: 'bsc' | 'ethereum' | 'base' | 'opbnb' | 'zksync' | 'polygon-zkevm' | 'linea' | 'arbitrum'
        /** @description Ethereum address */
        address: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            id: string
            token0: {
              id: string
              symbol: string
              name: string
              decimals: number
            }
            token1: {
              id: string
              symbol: string
              name: string
              decimals: number
            }
            volumeUSD: string
            token0Price: string
            token1Price: string
            tvlToken0: string
            tvlToken1: string
            volumeUSD24h: null | string
            volumeUSD7d: null | string
            tvlUSD: string
            tvlUSD24h: null | string
            tvlUSD7d: null | string
            createdAtTimestamp: Record<string, never> | string
          }
        }
      }
    }
  }
  getCachedPoolsStableByChainNameByAddress: {
    parameters: {
      query?: never
      header?: never
      path: {
        chainName: 'bsc' | 'arbitrum'
        /** @description Ethereum address */
        address: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            id: string
            token0: {
              id: string
              symbol: string
              name: string
              decimals: number
            }
            token1: {
              id: string
              symbol: string
              name: string
              decimals: number
            }
            volumeUSD: string
            token0Price: string
            token1Price: string
            tvlToken0: string
            tvlToken1: string
            volumeUSD24h: null | string
            volumeUSD7d: null | string
            tvlUSD: string
            tvlUSD24h: null | string
            tvlUSD7d: null | string
            createdAtTimestamp: Record<string, never> | string
            virtualPrice: string
            virtualPrice24h: null | string
            virtualPrice7d: null | string
          }
        }
      }
    }
  }
  getCachedPoolsV3ByChainNameListTop: {
    parameters: {
      query?: {
        /** @description Filter by Token address */
        token?: string
      }
      header?: never
      path: {
        /** @description Chain name */
        chainName: 'bsc' | 'ethereum' | 'base' | 'opbnb' | 'zksync' | 'polygon-zkevm' | 'linea' | 'arbitrum'
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            id: string
            token0: {
              id: string
              symbol: string
              name: string
              decimals: number
            }
            token1: {
              id: string
              symbol: string
              name: string
              decimals: number
            }
            volumeUSD: string
            token0Price: string
            token1Price: string
            tvlToken0: string
            tvlToken1: string
            volumeUSD24h: null | string
            volumeUSD7d: null | string
            tvlUSD: string
            tvlUSD24h: null | string
            tvlUSD7d: null | string
            createdAtTimestamp: Record<string, never> | string
            feeTier: number
            liquidity: string
            sqrtPrice: string
            tick: null | number
            feeUSD: string
            protocolFeeUSD: string
          }[]
        }
      }
    }
  }
  getCachedPoolsV2ByChainNameListTop: {
    parameters: {
      query?: {
        /** @description Filter by Token address */
        token?: string
      }
      header?: never
      path: {
        /** @description Chain name */
        chainName: 'bsc' | 'ethereum' | 'base' | 'opbnb' | 'zksync' | 'polygon-zkevm' | 'linea' | 'arbitrum'
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            id: string
            token0: {
              id: string
              symbol: string
              name: string
              decimals: number
            }
            token1: {
              id: string
              symbol: string
              name: string
              decimals: number
            }
            volumeUSD: string
            token0Price: string
            token1Price: string
            tvlToken0: string
            tvlToken1: string
            volumeUSD24h: null | string
            volumeUSD7d: null | string
            tvlUSD: string
            tvlUSD24h: null | string
            tvlUSD7d: null | string
            createdAtTimestamp: Record<string, never> | string
          }[]
        }
      }
    }
  }
  getCachedPoolsStableByChainNameListTop: {
    parameters: {
      query?: {
        /** @description Filter by Token address */
        token?: string
      }
      header?: never
      path: {
        chainName: 'bsc' | 'arbitrum'
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            id: string
            token0: {
              id: string
              symbol: string
              name: string
              decimals: number
            }
            token1: {
              id: string
              symbol: string
              name: string
              decimals: number
            }
            volumeUSD: string
            token0Price: string
            token1Price: string
            tvlToken0: string
            tvlToken1: string
            volumeUSD24h: null | string
            volumeUSD7d: null | string
            tvlUSD: string
            tvlUSD24h: null | string
            tvlUSD7d: null | string
            createdAtTimestamp: Record<string, never> | string
            virtualPrice: string
            virtualPrice24h: null | string
            virtualPrice7d: null | string
          }[]
        }
      }
    }
  }
  getCachedTxByChainNameV3Swaps: {
    parameters: {
      query?: {
        /** @description Filter by token address */
        token?: string
        /** @description Filter by pool address */
        pool?: string
        /** @description Cursor for pagination before */
        before?: string
        /** @description Cursor for pagination after */
        after?: string
      }
      header?: never
      path: {
        /** @description Chain name */
        chainName: 'bsc' | 'ethereum' | 'base' | 'opbnb' | 'zksync' | 'polygon-zkevm' | 'linea' | 'arbitrum'
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @description Cursor for pagination start */
            startCursor?: string
            /** @description Cursor for pagination end */
            endCursor?: string
            /** @description Has next page */
            hasNextPage?: boolean
            /** @description Has previous page */
            hasPrevPage?: boolean
            rows: {
              id: string
              transactionHash: string
              poolId: string
              token0: {
                id: string
                symbol: string
                name: string
                decimals: number
              }
              token1: {
                id: string
                symbol: string
                name: string
                decimals: number
              }
              amount0: string
              amount1: string
              amountUSD: string
              origin: null | string
              recipient: null | string
              timestamp: Record<string, never> | string
            }[]
          }
          'multipart/form-data': {
            /** @description Cursor for pagination start */
            startCursor?: string
            /** @description Cursor for pagination end */
            endCursor?: string
            /** @description Has next page */
            hasNextPage?: boolean
            /** @description Has previous page */
            hasPrevPage?: boolean
            rows: {
              id: string
              transactionHash: string
              poolId: string
              token0: {
                id: string
                symbol: string
                name: string
                decimals: number
              }
              token1: {
                id: string
                symbol: string
                name: string
                decimals: number
              }
              amount0: string
              amount1: string
              amountUSD: string
              origin: null | string
              recipient: null | string
              timestamp: Record<string, never> | string
            }[]
          }
          'text/plain': {
            /** @description Cursor for pagination start */
            startCursor?: string
            /** @description Cursor for pagination end */
            endCursor?: string
            /** @description Has next page */
            hasNextPage?: boolean
            /** @description Has previous page */
            hasPrevPage?: boolean
            rows: {
              id: string
              transactionHash: string
              poolId: string
              token0: {
                id: string
                symbol: string
                name: string
                decimals: number
              }
              token1: {
                id: string
                symbol: string
                name: string
                decimals: number
              }
              amount0: string
              amount1: string
              amountUSD: string
              origin: null | string
              recipient: null | string
              timestamp: Record<string, never> | string
            }[]
          }
        }
      }
    }
  }
  getCachedTxByChainNameV3Recent: {
    parameters: {
      query?: {
        /** @description Filter by token address */
        token?: string
        /** @description Filter by pool address */
        pool?: string
      }
      header?: never
      path: {
        /** @description Chain name */
        chainName: 'bsc' | 'ethereum' | 'base' | 'opbnb' | 'zksync' | 'polygon-zkevm' | 'linea' | 'arbitrum'
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['stableTransactions']
        }
      }
    }
  }
  getCachedTxByChainNameV2Recent: {
    parameters: {
      query?: {
        /** @description Filter by token address */
        token?: string
        /** @description Filter by pool address */
        pool?: string
      }
      header?: never
      path: {
        /** @description Chain name */
        chainName: 'bsc' | 'ethereum' | 'base' | 'opbnb' | 'zksync' | 'polygon-zkevm' | 'linea' | 'arbitrum'
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['stableTransactions']
        }
      }
    }
  }
  getCachedTxByChainNameStableRecent: {
    parameters: {
      query?: {
        /** @description Filter by token address */
        token?: string
        /** @description Filter by pool address */
        pool?: string
      }
      header?: never
      path: {
        chainName: 'bsc' | 'arbitrum'
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['stableTransactions']
        }
      }
    }
  }
  getCachedBlockByChainNameByTimestamp: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Chain name */
        chainName: 'bsc' | 'ethereum' | 'base' | 'opbnb' | 'zksync' | 'polygon-zkevm' | 'linea' | 'arbitrum'
        timestamp: string | number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /** @example 11150916 */
            height: number
            /** @example 1603964988 */
            timestamp: number
          }
        }
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': unknown
        }
      }
    }
  }
  'getCachedGaugesTotal-votesAll': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            epoch: number
            totalWeight?: string
          }[]
        }
      }
    }
  }
  getCachedProtocolChartByProtocolByChainNameVolume: {
    parameters: {
      query: {
        /** @description Chart group by */
        groupBy: '1D' | '1W' | '1M'
      }
      header?: never
      path: {
        /** @description Chain name */
        chainName: 'bsc' | 'ethereum' | 'base' | 'opbnb' | 'zksync' | 'polygon-zkevm' | 'linea' | 'arbitrum'
        /** @description Protocol version */
        protocol: 'v2' | 'v3' | 'stable'
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            bucket: Record<string, never> | string
            volumeUSD: null | string
          }[]
        }
      }
    }
  }
  getCachedProtocolChartByProtocolByChainNameTvl: {
    parameters: {
      query: {
        /** @description Chart group by */
        groupBy: '1D' | '1W' | '1M'
      }
      header?: never
      path: {
        /** @description Chain name */
        chainName: 'bsc' | 'ethereum' | 'base' | 'opbnb' | 'zksync' | 'polygon-zkevm' | 'linea' | 'arbitrum'
        /** @description Protocol version */
        protocol: 'v2' | 'v3' | 'stable'
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            bucket: Record<string, never> | string
            tvlUSD: null | string
          }[]
        }
      }
    }
  }
  getCachedProtocolByProtocolByChainNameStats: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Chain name */
        chainName: 'bsc' | 'ethereum' | 'base' | 'opbnb' | 'zksync' | 'polygon-zkevm' | 'linea' | 'arbitrum'
        /** @description Protocol version */
        protocol: 'v2' | 'v3' | 'stable'
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            tvlUSD: string
            totalVolumeUSD: string
            totalProtocolFeeUSD: string
            totalProtocolFeeUSD24h: string
            totalFeeUSD: string
            totalFeeUSD24h: string
            tvlUSD24h: string
            totalVolumeUSD24h: string
            txCount: number
            txCount24h: number
          }
        }
      }
    }
  }
  getStatusByProtocolByChainName: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Chain name */
        chainName: 'bsc' | 'ethereum' | 'base' | 'opbnb' | 'zksync' | 'polygon-zkevm' | 'linea' | 'arbitrum'
        /** @description Protocol version */
        protocol: 'v2' | 'v3' | 'stable'
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            height: number
          }
          'multipart/form-data': {
            height: number
          }
          'text/plain': {
            height: number
          }
        }
      }
    }
  }
  getDocJson: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
}
