export const CLPoolManager = [
  {
    type: 'constructor',
    inputs: [
      {
        name: '_vault',
        type: 'address',
        internalType: 'contract IVault',
      },
      {
        name: 'controllerGasLimit',
        type: 'uint256',
        internalType: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'MAX_TICK_SPACING',
    inputs: [],
    outputs: [{ name: '', type: 'int24', internalType: 'int24' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'MIN_PROTOCOL_FEE_DENOMINATOR',
    inputs: [],
    outputs: [{ name: '', type: 'uint8', internalType: 'uint8' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'MIN_TICK_SPACING',
    inputs: [],
    outputs: [{ name: '', type: 'int24', internalType: 'int24' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'collectProtocolFees',
    inputs: [
      { name: 'recipient', type: 'address', internalType: 'address' },
      { name: 'currency', type: 'address', internalType: 'Currency' },
      { name: 'amount', type: 'uint256', internalType: 'uint256' },
    ],
    outputs: [
      {
        name: 'amountCollected',
        type: 'uint256',
        internalType: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'donate',
    inputs: [
      {
        name: 'key',
        type: 'tuple',
        internalType: 'struct PoolKey',
        components: [
          {
            name: 'currency0',
            type: 'address',
            internalType: 'Currency',
          },
          {
            name: 'currency1',
            type: 'address',
            internalType: 'Currency',
          },
          {
            name: 'hooks',
            type: 'address',
            internalType: 'contract IHooks',
          },
          {
            name: 'poolManager',
            type: 'address',
            internalType: 'contract IPoolManager',
          },
          { name: 'fee', type: 'uint24', internalType: 'uint24' },
          { name: 'parameters', type: 'bytes32', internalType: 'bytes32' },
        ],
      },
      { name: 'amount0', type: 'uint256', internalType: 'uint256' },
      { name: 'amount1', type: 'uint256', internalType: 'uint256' },
      { name: 'hookData', type: 'bytes', internalType: 'bytes' },
    ],
    outputs: [{ name: 'delta', type: 'int256', internalType: 'BalanceDelta' }],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'extsload',
    inputs: [{ name: 'slot', type: 'bytes32', internalType: 'bytes32' }],
    outputs: [{ name: 'val', type: 'bytes32', internalType: 'bytes32' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'extsload',
    inputs: [{ name: 'slots', type: 'bytes32[]', internalType: 'bytes32[]' }],
    outputs: [{ name: '', type: 'bytes32[]', internalType: 'bytes32[]' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'getLiquidity',
    inputs: [
      { name: 'id', type: 'bytes32', internalType: 'PoolId' },
      { name: '_owner', type: 'address', internalType: 'address' },
      { name: 'tickLower', type: 'int24', internalType: 'int24' },
      { name: 'tickUpper', type: 'int24', internalType: 'int24' },
    ],
    outputs: [{ name: 'liquidity', type: 'uint128', internalType: 'uint128' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'getLiquidity',
    inputs: [{ name: 'id', type: 'bytes32', internalType: 'PoolId' }],
    outputs: [{ name: 'liquidity', type: 'uint128', internalType: 'uint128' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'getLmPool',
    inputs: [{ name: 'id', type: 'bytes32', internalType: 'PoolId' }],
    outputs: [{ name: 'lmPool', type: 'address', internalType: 'address' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'getPosition',
    inputs: [
      { name: 'id', type: 'bytes32', internalType: 'PoolId' },
      { name: 'owner', type: 'address', internalType: 'address' },
      { name: 'tickLower', type: 'int24', internalType: 'int24' },
      { name: 'tickUpper', type: 'int24', internalType: 'int24' },
    ],
    outputs: [
      {
        name: 'position',
        type: 'tuple',
        internalType: 'struct CLPosition.Info',
        components: [
          { name: 'liquidity', type: 'uint128', internalType: 'uint128' },
          {
            name: 'feeGrowthInside0LastX128',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'feeGrowthInside1LastX128',
            type: 'uint256',
            internalType: 'uint256',
          },
        ],
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'getSlot0',
    inputs: [{ name: 'id', type: 'bytes32', internalType: 'PoolId' }],
    outputs: [
      { name: 'sqrtPriceX96', type: 'uint160', internalType: 'uint160' },
      { name: 'tick', type: 'int24', internalType: 'int24' },
      { name: 'protocolFee', type: 'uint16', internalType: 'uint16' },
      { name: 'swapFee', type: 'uint24', internalType: 'uint24' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'initialize',
    inputs: [
      {
        name: 'key',
        type: 'tuple',
        internalType: 'struct PoolKey',
        components: [
          {
            name: 'currency0',
            type: 'address',
            internalType: 'Currency',
          },
          {
            name: 'currency1',
            type: 'address',
            internalType: 'Currency',
          },
          {
            name: 'hooks',
            type: 'address',
            internalType: 'contract IHooks',
          },
          {
            name: 'poolManager',
            type: 'address',
            internalType: 'contract IPoolManager',
          },
          { name: 'fee', type: 'uint24', internalType: 'uint24' },
          { name: 'parameters', type: 'bytes32', internalType: 'bytes32' },
        ],
      },
      { name: 'sqrtPriceX96', type: 'uint160', internalType: 'uint160' },
      { name: 'hookData', type: 'bytes', internalType: 'bytes' },
    ],
    outputs: [{ name: 'tick', type: 'int24', internalType: 'int24' }],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'masterChef',
    inputs: [],
    outputs: [{ name: '', type: 'address', internalType: 'address' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'modifyLiquidity',
    inputs: [
      {
        name: 'key',
        type: 'tuple',
        internalType: 'struct PoolKey',
        components: [
          {
            name: 'currency0',
            type: 'address',
            internalType: 'Currency',
          },
          {
            name: 'currency1',
            type: 'address',
            internalType: 'Currency',
          },
          {
            name: 'hooks',
            type: 'address',
            internalType: 'contract IHooks',
          },
          {
            name: 'poolManager',
            type: 'address',
            internalType: 'contract IPoolManager',
          },
          { name: 'fee', type: 'uint24', internalType: 'uint24' },
          { name: 'parameters', type: 'bytes32', internalType: 'bytes32' },
        ],
      },
      {
        name: 'params',
        type: 'tuple',
        internalType: 'struct ICLPoolManager.ModifyLiquidityParams',
        components: [
          { name: 'tickLower', type: 'int24', internalType: 'int24' },
          { name: 'tickUpper', type: 'int24', internalType: 'int24' },
          {
            name: 'liquidityDelta',
            type: 'int256',
            internalType: 'int256',
          },
        ],
      },
      { name: 'hookData', type: 'bytes', internalType: 'bytes' },
    ],
    outputs: [{ name: 'delta', type: 'int256', internalType: 'BalanceDelta' }],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'owner',
    inputs: [],
    outputs: [{ name: '', type: 'address', internalType: 'address' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'pools',
    inputs: [{ name: 'id', type: 'bytes32', internalType: 'PoolId' }],
    outputs: [
      {
        name: 'slot0',
        type: 'tuple',
        internalType: 'struct CLPool.Slot0',
        components: [
          {
            name: 'sqrtPriceX96',
            type: 'uint160',
            internalType: 'uint160',
          },
          { name: 'tick', type: 'int24', internalType: 'int24' },
          { name: 'protocolFee', type: 'uint16', internalType: 'uint16' },
          { name: 'swapFee', type: 'uint24', internalType: 'uint24' },
        ],
      },
      {
        name: 'feeGrowthGlobal0X128',
        type: 'uint256',
        internalType: 'uint256',
      },
      {
        name: 'feeGrowthGlobal1X128',
        type: 'uint256',
        internalType: 'uint256',
      },
      { name: 'liquidity', type: 'uint128', internalType: 'uint128' },
      {
        name: 'lmPool',
        type: 'address',
        internalType: 'contract ICLLmPool',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'protocolFeeController',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'address',
        internalType: 'contract IProtocolFeeController',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'protocolFeesAccrued',
    inputs: [{ name: 'currency', type: 'address', internalType: 'Currency' }],
    outputs: [{ name: '', type: 'uint256', internalType: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'renounceOwnership',
    inputs: [],
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'setLmPool',
    inputs: [
      {
        name: 'key',
        type: 'tuple',
        internalType: 'struct PoolKey',
        components: [
          {
            name: 'currency0',
            type: 'address',
            internalType: 'Currency',
          },
          {
            name: 'currency1',
            type: 'address',
            internalType: 'Currency',
          },
          {
            name: 'hooks',
            type: 'address',
            internalType: 'contract IHooks',
          },
          {
            name: 'poolManager',
            type: 'address',
            internalType: 'contract IPoolManager',
          },
          { name: 'fee', type: 'uint24', internalType: 'uint24' },
          { name: 'parameters', type: 'bytes32', internalType: 'bytes32' },
        ],
      },
      { name: 'lmPool', type: 'address', internalType: 'address' },
    ],
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'setMasterChef',
    inputs: [{ name: '_masterChef', type: 'address', internalType: 'address' }],
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'setProtocolFee',
    inputs: [
      {
        name: 'key',
        type: 'tuple',
        internalType: 'struct PoolKey',
        components: [
          {
            name: 'currency0',
            type: 'address',
            internalType: 'Currency',
          },
          {
            name: 'currency1',
            type: 'address',
            internalType: 'Currency',
          },
          {
            name: 'hooks',
            type: 'address',
            internalType: 'contract IHooks',
          },
          {
            name: 'poolManager',
            type: 'address',
            internalType: 'contract IPoolManager',
          },
          { name: 'fee', type: 'uint24', internalType: 'uint24' },
          { name: 'parameters', type: 'bytes32', internalType: 'bytes32' },
        ],
      },
    ],
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'setProtocolFeeController',
    inputs: [
      {
        name: 'controller',
        type: 'address',
        internalType: 'contract IProtocolFeeController',
      },
    ],
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'swap',
    inputs: [
      {
        name: 'key',
        type: 'tuple',
        internalType: 'struct PoolKey',
        components: [
          {
            name: 'currency0',
            type: 'address',
            internalType: 'Currency',
          },
          {
            name: 'currency1',
            type: 'address',
            internalType: 'Currency',
          },
          {
            name: 'hooks',
            type: 'address',
            internalType: 'contract IHooks',
          },
          {
            name: 'poolManager',
            type: 'address',
            internalType: 'contract IPoolManager',
          },
          { name: 'fee', type: 'uint24', internalType: 'uint24' },
          { name: 'parameters', type: 'bytes32', internalType: 'bytes32' },
        ],
      },
      {
        name: 'params',
        type: 'tuple',
        internalType: 'struct ICLPoolManager.SwapParams',
        components: [
          { name: 'zeroForOne', type: 'bool', internalType: 'bool' },
          {
            name: 'amountSpecified',
            type: 'int256',
            internalType: 'int256',
          },
          {
            name: 'sqrtPriceLimitX96',
            type: 'uint160',
            internalType: 'uint160',
          },
        ],
      },
      { name: 'hookData', type: 'bytes', internalType: 'bytes' },
    ],
    outputs: [{ name: 'delta', type: 'int256', internalType: 'BalanceDelta' }],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'transferOwnership',
    inputs: [{ name: 'newOwner', type: 'address', internalType: 'address' }],
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'updateDynamicSwapFee',
    inputs: [
      {
        name: 'key',
        type: 'tuple',
        internalType: 'struct PoolKey',
        components: [
          {
            name: 'currency0',
            type: 'address',
            internalType: 'Currency',
          },
          {
            name: 'currency1',
            type: 'address',
            internalType: 'Currency',
          },
          {
            name: 'hooks',
            type: 'address',
            internalType: 'contract IHooks',
          },
          {
            name: 'poolManager',
            type: 'address',
            internalType: 'contract IPoolManager',
          },
          { name: 'fee', type: 'uint24', internalType: 'uint24' },
          { name: 'parameters', type: 'bytes32', internalType: 'bytes32' },
        ],
      },
    ],
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'vault',
    inputs: [],
    outputs: [{ name: '', type: 'address', internalType: 'contract IVault' }],
    stateMutability: 'view',
  },
  {
    type: 'event',
    name: 'Donate',
    inputs: [
      {
        name: 'id',
        type: 'bytes32',
        indexed: true,
        internalType: 'PoolId',
      },
      {
        name: 'sender',
        type: 'address',
        indexed: true,
        internalType: 'address',
      },
      {
        name: 'amount0',
        type: 'uint256',
        indexed: false,
        internalType: 'uint256',
      },
      {
        name: 'amount1',
        type: 'uint256',
        indexed: false,
        internalType: 'uint256',
      },
      {
        name: 'tick',
        type: 'int24',
        indexed: false,
        internalType: 'int24',
      },
    ],
    anonymous: false,
  },
  {
    type: 'event',
    name: 'DynamicSwapFeeUpdated',
    inputs: [
      {
        name: 'id',
        type: 'bytes32',
        indexed: true,
        internalType: 'PoolId',
      },
      {
        name: 'dynamicSwapFee',
        type: 'uint24',
        indexed: false,
        internalType: 'uint24',
      },
    ],
    anonymous: false,
  },
  {
    type: 'event',
    name: 'Initialize',
    inputs: [
      {
        name: 'id',
        type: 'bytes32',
        indexed: true,
        internalType: 'PoolId',
      },
      {
        name: 'currency0',
        type: 'address',
        indexed: true,
        internalType: 'Currency',
      },
      {
        name: 'currency1',
        type: 'address',
        indexed: true,
        internalType: 'Currency',
      },
      {
        name: 'fee',
        type: 'uint24',
        indexed: false,
        internalType: 'uint24',
      },
      {
        name: 'tickSpacing',
        type: 'int24',
        indexed: false,
        internalType: 'int24',
      },
      {
        name: 'hooks',
        type: 'address',
        indexed: false,
        internalType: 'contract ICLHooks',
      },
    ],
    anonymous: false,
  },
  {
    type: 'event',
    name: 'ModifyLiquidity',
    inputs: [
      {
        name: 'id',
        type: 'bytes32',
        indexed: true,
        internalType: 'PoolId',
      },
      {
        name: 'sender',
        type: 'address',
        indexed: true,
        internalType: 'address',
      },
      {
        name: 'tickLower',
        type: 'int24',
        indexed: false,
        internalType: 'int24',
      },
      {
        name: 'tickUpper',
        type: 'int24',
        indexed: false,
        internalType: 'int24',
      },
      {
        name: 'liquidityDelta',
        type: 'int256',
        indexed: false,
        internalType: 'int256',
      },
    ],
    anonymous: false,
  },
  {
    type: 'event',
    name: 'OwnershipTransferred',
    inputs: [
      {
        name: 'previousOwner',
        type: 'address',
        indexed: true,
        internalType: 'address',
      },
      {
        name: 'newOwner',
        type: 'address',
        indexed: true,
        internalType: 'address',
      },
    ],
    anonymous: false,
  },
  {
    type: 'event',
    name: 'ProtocolFeeControllerUpdated',
    inputs: [
      {
        name: 'protocolFeeController',
        type: 'address',
        indexed: false,
        internalType: 'address',
      },
    ],
    anonymous: false,
  },
  {
    type: 'event',
    name: 'ProtocolFeeUpdated',
    inputs: [
      {
        name: 'id',
        type: 'bytes32',
        indexed: true,
        internalType: 'PoolId',
      },
      {
        name: 'protocolFee',
        type: 'uint16',
        indexed: false,
        internalType: 'uint16',
      },
    ],
    anonymous: false,
  },
  {
    type: 'event',
    name: 'SetLmPool',
    inputs: [
      {
        name: 'id',
        type: 'bytes32',
        indexed: true,
        internalType: 'PoolId',
      },
      {
        name: 'lmPool',
        type: 'address',
        indexed: false,
        internalType: 'address',
      },
    ],
    anonymous: false,
  },
  {
    type: 'event',
    name: 'SetMasterChef',
    inputs: [
      {
        name: 'masterChef',
        type: 'address',
        indexed: false,
        internalType: 'address',
      },
    ],
    anonymous: false,
  },
  {
    type: 'event',
    name: 'Swap',
    inputs: [
      {
        name: 'id',
        type: 'bytes32',
        indexed: true,
        internalType: 'PoolId',
      },
      {
        name: 'sender',
        type: 'address',
        indexed: true,
        internalType: 'address',
      },
      {
        name: 'amount0',
        type: 'int128',
        indexed: false,
        internalType: 'int128',
      },
      {
        name: 'amount1',
        type: 'int128',
        indexed: false,
        internalType: 'int128',
      },
      {
        name: 'sqrtPriceX96',
        type: 'uint160',
        indexed: false,
        internalType: 'uint160',
      },
      {
        name: 'liquidity',
        type: 'uint128',
        indexed: false,
        internalType: 'uint128',
      },
      {
        name: 'tick',
        type: 'int24',
        indexed: false,
        internalType: 'int24',
      },
      {
        name: 'fee',
        type: 'uint24',
        indexed: false,
        internalType: 'uint24',
      },
      {
        name: 'protocolFee',
        type: 'uint256',
        indexed: false,
        internalType: 'uint256',
      },
    ],
    anonymous: false,
  },
  { type: 'error', name: 'CannotUpdateEmptyPosition', inputs: [] },
  { type: 'error', name: 'CurrenciesInitializedOutOfOrder', inputs: [] },
  { type: 'error', name: 'FeeNotDynamic', inputs: [] },
  { type: 'error', name: 'FeeTooLarge', inputs: [] },
  { type: 'error', name: 'HookConfigValidationError', inputs: [] },
  { type: 'error', name: 'InvalidHookResponse', inputs: [] },
  { type: 'error', name: 'InvalidPrice', inputs: [] },
  { type: 'error', name: 'InvalidPriceOrLiquidity', inputs: [] },
  { type: 'error', name: 'InvalidProtocolFeeCollector', inputs: [] },
  {
    type: 'error',
    name: 'InvalidSqrtPriceLimit',
    inputs: [
      {
        name: 'sqrtPriceCurrentX96',
        type: 'uint160',
        internalType: 'uint160',
      },
      {
        name: 'sqrtPriceLimitX96',
        type: 'uint160',
        internalType: 'uint160',
      },
    ],
  },
  { type: 'error', name: 'InvalidSqrtRatio', inputs: [] },
  { type: 'error', name: 'InvalidTick', inputs: [] },
  { type: 'error', name: 'NoLiquidityToReceiveFees', inputs: [] },
  { type: 'error', name: 'NoOpHookMissingBeforeCall', inputs: [] },
  { type: 'error', name: 'NotEnoughLiquidity', inputs: [] },
  { type: 'error', name: 'PoolAlreadyInitialized', inputs: [] },
  { type: 'error', name: 'PoolManagerMismatch', inputs: [] },
  { type: 'error', name: 'PoolNotInitialized', inputs: [] },
  { type: 'error', name: 'PoolNotInitialized', inputs: [] },
  { type: 'error', name: 'PriceOverflow', inputs: [] },
  { type: 'error', name: 'ProtocolFeeCannotBeFetched', inputs: [] },
  {
    type: 'error',
    name: 'ProtocolFeeControllerCallFailedOrInvalidResult',
    inputs: [],
  },
  { type: 'error', name: 'SafeCastOverflow', inputs: [] },
  { type: 'error', name: 'SwapAmountCannotBeZero', inputs: [] },
  {
    type: 'error',
    name: 'TickLiquidityOverflow',
    inputs: [{ name: 'tick', type: 'int24', internalType: 'int24' }],
  },
  {
    type: 'error',
    name: 'TickLowerOutOfBounds',
    inputs: [{ name: 'tickLower', type: 'int24', internalType: 'int24' }],
  },
  {
    type: 'error',
    name: 'TickMisaligned',
    inputs: [
      { name: 'tick', type: 'int24', internalType: 'int24' },
      { name: 'tickSpacing', type: 'int24', internalType: 'int24' },
    ],
  },
  { type: 'error', name: 'TickSpacingTooLarge', inputs: [] },
  { type: 'error', name: 'TickSpacingTooSmall', inputs: [] },
  {
    type: 'error',
    name: 'TickUpperOutOfBounds',
    inputs: [{ name: 'tickUpper', type: 'int24', internalType: 'int24' }],
  },
  {
    type: 'error',
    name: 'TicksMisordered',
    inputs: [
      { name: 'tickLower', type: 'int24', internalType: 'int24' },
      { name: 'tickUpper', type: 'int24', internalType: 'int24' },
    ],
  },
  { type: 'error', name: 'UnauthorizedCaller', inputs: [] },
] as const
