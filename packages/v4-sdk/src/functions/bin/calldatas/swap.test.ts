import { stringToHex, zeroAddress } from 'viem'
import { describe, expect, test } from 'vitest'
import { PoolKey } from '../../../utils'
import { binPoolSwapCalldata } from './swap'

describe('swap', () => {
  const poolKey: PoolKey<'Bin'> = {
    currency0: '0x7d356b6aFBF4b3e9a5d9AA02275F0e00558627e8',
    currency1: '0xB071bbB31222aB5A9fbb50E4eFcad2e784221dA3',
    hooks: zeroAddress,
    poolManager: '0x2e234DAe75C793f67A35089C9d99245E1C58470b',
    fee: 3000,
    parameters: {
      binStep: 10,
    },
  }

  test('swapIn For x', () => {
    const calldata = binPoolSwapCalldata(poolKey, false, 548569353283632155n, stringToHex('0x'))
    expect(calldata).toBe(
      '0x87ec2a890000000000000000000000007d356b6afbf4b3e9a5d9aa02275f0e00558627e8000000000000000000000000b071bbb31222ab5a9fbb50e4efcad2e784221da300000000000000000000000000000000000000000000000000000000000000000000000000000000000000002e234dae75c793f67a35089c9d99245e1c58470b0000000000000000000000000000000000000000000000000000000000000bb800000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000079ce8eb9d22fc1b000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000000023078000000000000000000000000000000000000000000000000000000000000'
    )
  })
  test('swapIn For y', () => {
    const calldata = binPoolSwapCalldata(poolKey, true, 28082360243520n, stringToHex('0x'))
    expect(calldata).toBe(
      '0x87ec2a890000000000000000000000007d356b6afbf4b3e9a5d9aa02275f0e00558627e8000000000000000000000000b071bbb31222ab5a9fbb50e4efcad2e784221da300000000000000000000000000000000000000000000000000000000000000000000000000000000000000002e234dae75c793f67a35089c9d99245e1c58470b0000000000000000000000000000000000000000000000000000000000000bb800000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000198a6f1b5540000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000000023078000000000000000000000000000000000000000000000000000000000000'
    )
  })
  test('swapOut For x', () => {
    const calldata = binPoolSwapCalldata(poolKey, false, 720859743275939352n, stringToHex('0x'))
    expect(calldata).toBe(
      '0x87ec2a890000000000000000000000007d356b6afbf4b3e9a5d9aa02275f0e00558627e8000000000000000000000000b071bbb31222ab5a9fbb50e4efcad2e784221da300000000000000000000000000000000000000000000000000000000000000000000000000000000000000002e234dae75c793f67a35089c9d99245e1c58470b0000000000000000000000000000000000000000000000000000000000000bb800000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a01021e02d77618000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000000023078000000000000000000000000000000000000000000000000000000000000'
    )
  })
  test('swapOut For y', () => {
    const calldata = binPoolSwapCalldata(poolKey, true, 7n, stringToHex('0x'))
    expect(calldata).toBe(
      '0x87ec2a890000000000000000000000007d356b6afbf4b3e9a5d9aa02275f0e00558627e8000000000000000000000000b071bbb31222ab5a9fbb50e4efcad2e784221da300000000000000000000000000000000000000000000000000000000000000000000000000000000000000002e234dae75c793f67a35089c9d99245e1c58470b0000000000000000000000000000000000000000000000000000000000000bb800000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000007000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000000023078000000000000000000000000000000000000000000000000000000000000'
    )
  })
})
