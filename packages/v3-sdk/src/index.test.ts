import { expect, test } from 'vitest'
import * as exports from './index'

test('exports', () => {
  expect(Object.keys(exports)).toMatchInlineSnapshot(`
    [
      "Pool",
      "Position",
      "Route",
      "Tick",
      "tradeComparator",
      "Trade",
      "NoTickDataProvider",
      "TickListDataProvider",
      "getPool",
      "getPoolAddress",
      "toId",
      "getPriceOfToken",
      "getTokensPrice",
      "hasInvolvedToken",
      "swap",
      "getOutputAmount",
      "getInputAmount",
      "getInputAmountByExactOut",
      "toHex",
      "computePoolAddress",
      "encodeRouteToPath",
      "encodeSqrtRatioX96",
      "FullMath",
      "isSorted",
      "LiquidityMath",
      "maxLiquidityForAmounts",
      "mostSignificantBit",
      "nearestUsableTick",
      "PositionLibrary",
      "tickToPrice",
      "priceToClosestTick",
      "SqrtPriceMath",
      "SwapMath",
      "subIn256",
      "TickLibrary",
      "TickList",
      "TickMath",
      "PositionMath",
      "FeeCalculator",
      "getEstimatedLPFeeWithProtocolFee",
      "getEstimatedLPFee",
      "getEstimatedLPFeeByAmountsWithProtocolFee",
      "getEstimatedLPFeeByAmounts",
      "getDependentAmount",
      "getLiquidityBySingleAmount",
      "getLiquidityByAmountsAndPrice",
      "getAmountsByLiquidityAndPrice",
      "getAmountsAtNewPrice",
      "getAverageLiquidity",
      "getLiquidityFromSqrtRatioX96",
      "getLiquidityFromTick",
      "parseProtocolFees",
      "sqrtRatioX96ToPrice",
      "isPoolTickInRange",
      "FACTORY_ADDRESSES",
      "DEPLOYER_ADDRESSES",
      "ADDRESS_ZERO",
      "POOL_INIT_CODE_HASHES",
      "NFT_POSITION_MANAGER_ADDRESSES",
      "FeeAmount",
      "TICK_SPACINGS",
      "MasterChefV3",
      "Multicall",
      "MaxUint128",
      "isMint",
      "NonfungiblePositionManager",
      "Payments",
      "SwapQuoter",
      "SelfPermit",
      "Staker",
      "SwapRouter",
      "pancakeV3PoolABI",
      "masterChefV3ABI",
      "nonfungiblePositionManagerABI",
      "peripheryPaymentsWithFeeABI",
      "quoterABI",
      "quoterV2ABI",
      "selfPermitABI",
      "swapRouterABI",
      "v3PoolAbi",
      "v3StakerABI",
    ]
  `)
})
